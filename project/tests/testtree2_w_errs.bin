line 46:30 missing ';' at 'require'
line 46:37 missing ';' at '('
line 217:38 missing ';' at '}'
line 630:119 missing ';' at 'uint256'
line 632:47 mismatched input '}' expecting ':'
line 644:52 mismatched input '}' expecting ':'
(sourceUnit (pragmaDirective pragma (pragmaName (identifier solidity)) (pragmaValue (version (versionConstraint 0.4.19))) ;) (contractDefinition contract (identifier Ownable) { (contractPart (stateVariableDeclaration (typeName (elementaryTypeName address)) public (identifier owner) ;)) (contractPart (eventDefinition event (identifier OwnershipTransferred) (eventParameterList ( (eventParameter (typeName (elementaryTypeName address)) indexed (identifier previousOwner)) , (eventParameter (typeName (elementaryTypeName address)) indexed (identifier newOwner)) )) ;)) (contractPart (functionDefinition function (identifier Ownable) (parameterList ( )) (modifierList public) (block { (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier owner))) = (expression (expression (primaryExpression (identifier msg))) . (identifier sender))) ;))) }))) (contractPart (modifierDefinition modifier (identifier onlyOwner) (parameterList ( )) (block { (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier require))) ( (functionCallArguments (expressionList (expression (expression (expression (primaryExpression (identifier msg))) . (identifier sender)) == (expression (primaryExpression (identifier owner)))))) )) ;))) (statement (simpleStatement (expressionStatement (expression (primaryExpression (identifier _))) ;))) }))) (contractPart (functionDefinition function (identifier transferOwnership) (parameterList ( (parameter (typeName (elementaryTypeName address)) (identifier newOwner)) )) (modifierList public (modifierInvocation (identifier onlyOwner))) (block { (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier require))) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier newOwner))) != (expression (expression (primaryExpression (elementaryTypeNameExpression (elementaryTypeName address)))) ( (functionCallArguments (expressionList (expression (primaryExpression (numberLiteral 0))))) ))))) )) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier OwnershipTransferred))) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier owner))) , (expression (primaryExpression (identifier newOwner))))) )) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier owner))) = (expression (primaryExpression (identifier newOwner)))) ;))) }))) }) (contractDefinition contract (identifier ERC20Basic) { (contractPart (functionDefinition function (identifier totalSupply) (parameterList ( )) (modifierList public (stateMutability view)) (returnParameters returns (parameterList ( (parameter (typeName (elementaryTypeName uint256))) ))) ;)) (contractPart (functionDefinition function (identifier balanceOf) (parameterList ( (parameter (typeName (elementaryTypeName address)) (identifier who)) )) (modifierList public (stateMutability view)) (returnParameters returns (parameterList ( (parameter (typeName (elementaryTypeName uint256))) ))) ;)) (contractPart (functionDefinition function (identifier transfer) (parameterList ( (parameter (typeName (elementaryTypeName address)) (identifier to)) , (parameter (typeName (elementaryTypeName uint256)) (identifier value)) )) (modifierList public) (returnParameters returns (parameterList ( (parameter (typeName (elementaryTypeName bool))) ))) ;)) (contractPart (eventDefinition event (identifier Transfer) (eventParameterList ( (eventParameter (typeName (elementaryTypeName address)) indexed (identifier from)) , (eventParameter (typeName (elementaryTypeName address)) indexed (identifier to)) , (eventParameter (typeName (elementaryTypeName uint256)) (identifier value)) )) ;)) }) (contractDefinition contract (identifier ERC20) is (inheritanceSpecifier (userDefinedTypeName (identifier ERC20Basic))) { (contractPart (functionDefinition function (identifier allowance) (parameterList ( (parameter (typeName (elementaryTypeName address)) (identifier owner)) , (parameter (typeName (elementaryTypeName address)) (identifier spender)) )) (modifierList public (stateMutability view)) (returnParameters returns (parameterList ( (parameter (typeName (elementaryTypeName uint256))) ))) ;)) (contractPart (functionDefinition function (identifier transferFrom) (parameterList ( (parameter (typeName (elementaryTypeName address)) (identifier from)) , (parameter (typeName (elementaryTypeName address)) (identifier to)) , (parameter (typeName (elementaryTypeName uint256)) (identifier value)) )) (modifierList public) (returnParameters returns (parameterList ( (parameter (typeName (elementaryTypeName bool))) ))) ;)) (contractPart (functionDefinition function (identifier approve) (parameterList ( (parameter (typeName (elementaryTypeName address)) (identifier spender)) , (parameter (typeName (elementaryTypeName uint256)) (identifier value)) )) (modifierList public) (returnParameters returns (parameterList ( (parameter (typeName (elementaryTypeName bool))) ))) ;)) (contractPart (eventDefinition event (identifier Approval) (eventParameterList ( (eventParameter (typeName (elementaryTypeName address)) indexed (identifier owner)) , (eventParameter (typeName (elementaryTypeName address)) indexed (identifier spender)) , (eventParameter (typeName (elementaryTypeName uint256)) (identifier value)) )) ;)) }) (contractDefinition library (identifier SafeMath) { (contractPart (functionDefinition function (identifier mul) (parameterList ( (parameter (typeName (elementaryTypeName uint256)) (identifier a)) , (parameter (typeName (elementaryTypeName uint256)) (identifier b)) )) (modifierList internal (stateMutability pure)) (returnParameters returns (parameterList ( (parameter (typeName (elementaryTypeName uint256))) ))) (block { (statement (ifStatement if ( (expression (expression (primaryExpression (identifier a))) == (expression (primaryExpression (numberLiteral 0)))) ) (statement (block { (statement (returnStatement return (expression (primaryExpression (numberLiteral 0))) ;)) })))) (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint256)) (identifier c)) = (expression (primaryExpression (identifier a))) <missing ';'>))) (statement (simpleStatement (expressionStatement (expression (primaryExpression (identifier require))) <missing ';'>))) (statement simpleStatement) (statement (simpleStatement ()) (statement (simpleStatement c)) (statement (returnStatement return (expression (primaryExpression (identifier c))) ;)) }))) (contractPart (functionDefinition function (identifier sub) (parameterList ( (parameter (typeName (elementaryTypeName uint256)) (identifier a)) , (parameter (typeName (elementaryTypeName uint256)) (identifier b)) )) (modifierList internal (stateMutability pure)) (returnParameters returns (parameterList ( (parameter (typeName (elementaryTypeName uint256))) ))) (block { (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier require))) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier b))) <= (expression (primaryExpression (identifier a)))))) )) ;))) (statement (returnStatement return (expression (expression (primaryExpression (identifier a))) - (expression (primaryExpression (identifier b)))) ;)) }))) (contractPart (functionDefinition function (identifier add) (parameterList ( (parameter (typeName (elementaryTypeName uint256)) (identifier a)) , (parameter (typeName (elementaryTypeName uint256)) (identifier b)) )) (modifierList internal (stateMutability pure)) (returnParameters returns (parameterList ( (parameter (typeName (elementaryTypeName uint256))) ))) (block { (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint256)) (identifier c)) = (expression (expression (primaryExpression (identifier a))) + (expression (primaryExpression (identifier b)))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier require))) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier c))) >= (expression (primaryExpression (identifier a)))))) )) ;))) (statement (returnStatement return (expression (primaryExpression (identifier c))) ;)) }))) }) (contractDefinition contract (identifier Migratable) { (contractPart (functionDefinition function (identifier migrate) (parameterList ( (parameter (typeName (elementaryTypeName address)) (identifier user)) , (parameter (typeName (elementaryTypeName uint256)) (identifier amount)) , (parameter (typeName (elementaryTypeName address)) (identifier tokenAddr)) )) (modifierList external (stateMutability payable)) (returnParameters returns (parameterList ( (parameter (typeName (elementaryTypeName bool))) ))) ;)) }) (contractDefinition contract (identifier JoysoDataDecoder) { (contractPart (functionDefinition function (identifier decodeOrderUserId) (parameterList ( (parameter (typeName (elementaryTypeName uint256)) (identifier data)) )) (modifierList internal (stateMutability pure)) (returnParameters returns (parameterList ( (parameter (typeName (elementaryTypeName uint256))) ))) (block { (statement (returnStatement return (expression (expression (primaryExpression (identifier data))) & (expression (primaryExpression (numberLiteral 0x00000000000000000000000000000000000000000000000000000000ffffffff)))) ;)) }))) (contractPart (functionDefinition function (identifier retrieveV) (parameterList ( (parameter (typeName (elementaryTypeName uint256)) (identifier data)) )) (modifierList internal (stateMutability pure)) (returnParameters returns (parameterList ( (parameter (typeName (elementaryTypeName uint256))) ))) (block { (statement (returnStatement return (expression (expression (expression (expression (primaryExpression (identifier data))) & (expression (primaryExpression (numberLiteral 0x000000000000000000000000f000000000000000000000000000000000000000)))) == (expression (primaryExpression (numberLiteral 0)))) ? (expression (primaryExpression (numberLiteral 27))) : (expression (primaryExpression (numberLiteral 28)))) ;)) }))) }) (contractDefinition contract (identifier Joyso) is (inheritanceSpecifier (userDefinedTypeName (identifier Ownable))) , (inheritanceSpecifier (userDefinedTypeName (identifier JoysoDataDecoder))) { (contractPart (usingForDeclaration using (identifier SafeMath) for (typeName (elementaryTypeName uint256)) ;)) (contractPart (stateVariableDeclaration (typeName (elementaryTypeName uint256)) private constant (identifier USER_MASK) = (expression (primaryExpression (numberLiteral 0x00000000000000000000000000000000000000000000000000000000ffffffff))) ;)) (contractPart (stateVariableDeclaration (typeName (elementaryTypeName uint256)) private constant (identifier PAYMENT_METHOD_MASK) = (expression (primaryExpression (numberLiteral 0x00000000000000000000000f0000000000000000000000000000000000000000))) ;)) (contractPart (stateVariableDeclaration (typeName (elementaryTypeName uint256)) private constant (identifier WITHDRAW_TOKEN_MASK) = (expression (primaryExpression (numberLiteral 0x0000000000000000000000000000000000000000000000000000ffff00000000))) ;)) (contractPart (stateVariableDeclaration (typeName (elementaryTypeName uint256)) private constant (identifier V_MASK) = (expression (primaryExpression (numberLiteral 0x000000000000000000000000f000000000000000000000000000000000000000))) ;)) (contractPart (stateVariableDeclaration (typeName (elementaryTypeName uint256)) private constant (identifier TOKEN_SELL_MASK) = (expression (primaryExpression (numberLiteral 0x000000000000000000000000000000000000000000000000ffff000000000000))) ;)) (contractPart (stateVariableDeclaration (typeName (elementaryTypeName uint256)) private constant (identifier TOKEN_BUY_MASK) = (expression (primaryExpression (numberLiteral 0x0000000000000000000000000000000000000000000000000000ffff00000000))) ;)) (contractPart (stateVariableDeclaration (typeName (elementaryTypeName uint256)) private constant (identifier SIGN_MASK) = (expression (primaryExpression (numberLiteral 0xffffffffffffffffffffffff0000000000000000000000000000000000000000))) ;)) (contractPart (stateVariableDeclaration (typeName (elementaryTypeName uint256)) private constant (identifier MATCH_SIGN_MASK) = (expression (primaryExpression (numberLiteral 0xfffffffffffffffffffffff00000000000000000000000000000000000000000))) ;)) (contractPart (stateVariableDeclaration (typeName (elementaryTypeName uint256)) private constant (identifier TOKEN_JOY_PRICE_MASK) = (expression (primaryExpression (numberLiteral 0x0000000000000000000000000fffffffffffffffffffffff0000000000000000))) ;)) (contractPart (stateVariableDeclaration (typeName (elementaryTypeName uint256)) private constant (identifier JOY_PRICE_MASK) = (expression (primaryExpression (numberLiteral 0x0000000000000000fffffff00000000000000000000000000000000000000000))) ;)) (contractPart (stateVariableDeclaration (typeName (elementaryTypeName uint256)) private constant (identifier IS_BUY_MASK) = (expression (primaryExpression (numberLiteral 0x00000000000000000000000f0000000000000000000000000000000000000000))) ;)) (contractPart (stateVariableDeclaration (typeName (elementaryTypeName uint256)) private constant (identifier TAKER_FEE_MASK) = (expression (primaryExpression (numberLiteral 0x00000000ffff0000000000000000000000000000000000000000000000000000))) ;)) (contractPart (stateVariableDeclaration (typeName (elementaryTypeName uint256)) private constant (identifier MAKER_FEE_MASK) = (expression (primaryExpression (numberLiteral 0x000000000000ffff000000000000000000000000000000000000000000000000))) ;)) (contractPart (stateVariableDeclaration (typeName (elementaryTypeName uint256)) private constant (identifier PAY_BY_TOKEN) = (expression (primaryExpression (numberLiteral 0x0000000000000000000000020000000000000000000000000000000000000000))) ;)) (contractPart (stateVariableDeclaration (typeName (elementaryTypeName uint256)) private constant (identifier PAY_BY_JOY) = (expression (primaryExpression (numberLiteral 0x0000000000000000000000010000000000000000000000000000000000000000))) ;)) (contractPart (stateVariableDeclaration (typeName (elementaryTypeName uint256)) private constant (identifier ORDER_ISBUY) = (expression (primaryExpression (numberLiteral 0x0000000000000000000000010000000000000000000000000000000000000000))) ;)) (contractPart (stateVariableDeclaration (typeName (mapping mapping ( (elementaryTypeName address) => (typeName (mapping mapping ( (elementaryTypeName address) => (typeName (elementaryTypeName uint256)) ))) ))) private (identifier balances) ;)) (contractPart (stateVariableDeclaration (typeName (mapping mapping ( (elementaryTypeName address) => (typeName (elementaryTypeName uint256)) ))) public (identifier userLock) ;)) (contractPart (stateVariableDeclaration (typeName (mapping mapping ( (elementaryTypeName address) => (typeName (elementaryTypeName uint256)) ))) public (identifier userNonce) ;)) (contractPart (stateVariableDeclaration (typeName (mapping mapping ( (elementaryTypeName bytes32) => (typeName (elementaryTypeName uint256)) ))) public (identifier orderFills) ;)) (contractPart (stateVariableDeclaration (typeName (mapping mapping ( (elementaryTypeName bytes32) => (typeName (elementaryTypeName bool)) ))) public (identifier usedHash) ;)) (contractPart (stateVariableDeclaration (typeName (mapping mapping ( (elementaryTypeName address) => (typeName (elementaryTypeName bool)) ))) public (identifier isAdmin) ;)) (contractPart (stateVariableDeclaration (typeName (mapping mapping ( (elementaryTypeName uint256) => (typeName (elementaryTypeName address)) ))) public (identifier tokenId2Address) ;)) (contractPart (stateVariableDeclaration (typeName (mapping mapping ( (elementaryTypeName uint256) => (typeName (elementaryTypeName address)) ))) public (identifier userId2Address) ;)) (contractPart (stateVariableDeclaration (typeName (mapping mapping ( (elementaryTypeName address) => (typeName (elementaryTypeName uint256)) ))) public (identifier userAddress2Id) ;)) (contractPart (stateVariableDeclaration (typeName (mapping mapping ( (elementaryTypeName address) => (typeName (elementaryTypeName uint256)) ))) public (identifier tokenAddress2Id) ;)) (contractPart (stateVariableDeclaration (typeName (elementaryTypeName address)) public (identifier joysoWallet) ;)) (contractPart (stateVariableDeclaration (typeName (elementaryTypeName address)) public (identifier joyToken) ;)) (contractPart (stateVariableDeclaration (typeName (elementaryTypeName uint256)) public (identifier lockPeriod) = (expression (primaryExpression (numberLiteral 30 days))) ;)) (contractPart (stateVariableDeclaration (typeName (elementaryTypeName uint256)) public (identifier userCount) ;)) (contractPart (stateVariableDeclaration (typeName (elementaryTypeName bool)) public (identifier tradeEventEnabled) = (expression (primaryExpression true)) ;)) (contractPart (modifierDefinition modifier (identifier onlyAdmin) (block { (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier require))) ( (functionCallArguments (expressionList (expression (expression (expression (expression (primaryExpression (identifier msg))) . (identifier sender)) == (expression (primaryExpression (identifier owner)))) || (expression (expression (primaryExpression (identifier isAdmin))) [ (expression (expression (primaryExpression (identifier msg))) . (identifier sender)) ])))) )) ;))) (statement (simpleStatement (expressionStatement (expression (primaryExpression (identifier _))) ;))) }))) (contractPart (eventDefinition event (identifier Deposit) (eventParameterList ( (eventParameter (typeName (elementaryTypeName address)) (identifier token)) , (eventParameter (typeName (elementaryTypeName address)) (identifier user)) , (eventParameter (typeName (elementaryTypeName uint256)) (identifier amount)) , (eventParameter (typeName (elementaryTypeName uint256)) (identifier balance)) )) ;)) (contractPart (eventDefinition event (identifier Withdraw) (eventParameterList ( (eventParameter (typeName (elementaryTypeName address)) (identifier token)) , (eventParameter (typeName (elementaryTypeName address)) (identifier user)) , (eventParameter (typeName (elementaryTypeName uint256)) (identifier amount)) , (eventParameter (typeName (elementaryTypeName uint256)) (identifier balance)) )) ;)) (contractPart (eventDefinition event (identifier NewUser) (eventParameterList ( (eventParameter (typeName (elementaryTypeName address)) (identifier user)) , (eventParameter (typeName (elementaryTypeName uint256)) (identifier id)) )) ;)) (contractPart (eventDefinition event (identifier Lock) (eventParameterList ( (eventParameter (typeName (elementaryTypeName address)) (identifier user)) , (eventParameter (typeName (elementaryTypeName uint256)) (identifier timeLock)) )) ;)) (contractPart (eventDefinition event (identifier TradeSuccess) (eventParameterList ( (eventParameter (typeName (elementaryTypeName address)) (identifier user)) , (eventParameter (typeName (elementaryTypeName uint256)) (identifier baseAmount)) , (eventParameter (typeName (elementaryTypeName uint256)) (identifier tokenAmount)) , (eventParameter (typeName (elementaryTypeName bool)) (identifier isBuy)) , (eventParameter (typeName (elementaryTypeName uint256)) (identifier fee)) )) ;)) (contractPart (functionDefinition function (identifier Joyso) (parameterList ( (parameter (typeName (elementaryTypeName address)) (identifier _joysoWallet)) , (parameter (typeName (elementaryTypeName address)) (identifier _joyToken)) )) (modifierList public) (block { (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier joysoWallet))) = (expression (primaryExpression (identifier _joysoWallet)))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier addUser))) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier _joysoWallet))))) )) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier joyToken))) = (expression (primaryExpression (identifier _joyToken)))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (expression (primaryExpression (identifier tokenAddress2Id))) [ (expression (primaryExpression (identifier joyToken))) ]) = (expression (primaryExpression (numberLiteral 1)))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (expression (primaryExpression (identifier tokenAddress2Id))) [ (expression (primaryExpression (numberLiteral 0))) ]) = (expression (primaryExpression (numberLiteral 0)))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (expression (primaryExpression (identifier tokenId2Address))) [ (expression (primaryExpression (numberLiteral 0))) ]) = (expression (primaryExpression (numberLiteral 0)))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (expression (primaryExpression (identifier tokenId2Address))) [ (expression (primaryExpression (numberLiteral 1))) ]) = (expression (primaryExpression (identifier joyToken)))) ;))) }))) (contractPart (functionDefinition function (identifier depositToken) (parameterList ( (parameter (typeName (elementaryTypeName address)) (identifier token)) , (parameter (typeName (elementaryTypeName uint256)) (identifier amount)) )) (modifierList external) (block { (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier require))) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier amount))) > (expression (primaryExpression (numberLiteral 0)))))) )) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier require))) ( (functionCallArguments (expressionList (expression (expression (expression (primaryExpression (identifier tokenAddress2Id))) [ (expression (primaryExpression (identifier token))) ]) != (expression (primaryExpression (numberLiteral 0)))))) )) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier addUser))) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier msg))) . (identifier sender)))) )) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier require))) ( (functionCallArguments (expressionList (expression (expression (expression (expression (primaryExpression (identifier ERC20))) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier token))))) )) . (identifier transferFrom)) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier msg))) . (identifier sender)) , (expression (primaryExpression (identifier this))) , (expression (primaryExpression (identifier amount))))) )))) )) ;))) (statement (simpleStatement (expressionStatement (expression (expression (expression (expression (primaryExpression (identifier balances))) [ (expression (primaryExpression (identifier token))) ]) [ (expression (expression (primaryExpression (identifier msg))) . (identifier sender)) ]) = (expression (expression (expression (expression (expression (primaryExpression (identifier balances))) [ (expression (primaryExpression (identifier token))) ]) [ (expression (expression (primaryExpression (identifier msg))) . (identifier sender)) ]) . (identifier add)) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier amount))))) ))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier Deposit))) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier token))) , (expression (expression (primaryExpression (identifier msg))) . (identifier sender)) , (expression (primaryExpression (identifier amount))) , (expression (expression (expression (primaryExpression (identifier balances))) [ (expression (primaryExpression (identifier token))) ]) [ (expression (expression (primaryExpression (identifier msg))) . (identifier sender)) ]))) )) ;))) }))) (contractPart (functionDefinition function (identifier depositEther) (parameterList ( )) (modifierList external (stateMutability payable)) (block { (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier require))) ( (functionCallArguments (expressionList (expression (expression (expression (primaryExpression (identifier msg))) . (identifier value)) > (expression (primaryExpression (numberLiteral 0)))))) )) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier addUser))) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier msg))) . (identifier sender)))) )) ;))) (statement (simpleStatement (expressionStatement (expression (expression (expression (expression (primaryExpression (identifier balances))) [ (expression (primaryExpression (numberLiteral 0))) ]) [ (expression (expression (primaryExpression (identifier msg))) . (identifier sender)) ]) = (expression (expression (expression (expression (expression (primaryExpression (identifier balances))) [ (expression (primaryExpression (numberLiteral 0))) ]) [ (expression (expression (primaryExpression (identifier msg))) . (identifier sender)) ]) . (identifier add)) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier msg))) . (identifier value)))) ))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier Deposit))) ( (functionCallArguments (expressionList (expression (primaryExpression (numberLiteral 0))) , (expression (expression (primaryExpression (identifier msg))) . (identifier sender)) , (expression (expression (primaryExpression (identifier msg))) . (identifier value)) , (expression (expression (expression (primaryExpression (identifier balances))) [ (expression (primaryExpression (numberLiteral 0))) ]) [ (expression (expression (primaryExpression (identifier msg))) . (identifier sender)) ]))) )) ;))) }))) (contractPart (functionDefinition function (identifier withdraw) (parameterList ( (parameter (typeName (elementaryTypeName address)) (identifier token)) , (parameter (typeName (elementaryTypeName uint256)) (identifier amount)) )) (modifierList external) (block { (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier require))) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier amount))) > (expression (primaryExpression (numberLiteral 0)))))) )) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier require))) ( (functionCallArguments (expressionList (expression (expression (expression (expression (primaryExpression (identifier getTime))) ( functionCallArguments )) > (expression (expression (primaryExpression (identifier userLock))) [ (expression (expression (primaryExpression (identifier msg))) . (identifier sender)) ])) && (expression (expression (expression (primaryExpression (identifier userLock))) [ (expression (expression (primaryExpression (identifier msg))) . (identifier sender)) ]) != (expression (primaryExpression (numberLiteral 0))))))) )) ;))) (statement (simpleStatement (expressionStatement (expression (expression (expression (expression (primaryExpression (identifier balances))) [ (expression (primaryExpression (identifier token))) ]) [ (expression (expression (primaryExpression (identifier msg))) . (identifier sender)) ]) = (expression (expression (expression (expression (expression (primaryExpression (identifier balances))) [ (expression (primaryExpression (identifier token))) ]) [ (expression (expression (primaryExpression (identifier msg))) . (identifier sender)) ]) . (identifier sub)) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier amount))))) ))) ;))) (statement (ifStatement if ( (expression (expression (primaryExpression (identifier token))) == (expression (primaryExpression (numberLiteral 0)))) ) (statement (block { (statement (simpleStatement (expressionStatement (expression (expression (expression (expression (primaryExpression (identifier msg))) . (identifier sender)) . (identifier transfer)) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier amount))))) )) ;))) })) else (statement (block { (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier require))) ( (functionCallArguments (expressionList (expression (expression (expression (expression (primaryExpression (identifier ERC20))) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier token))))) )) . (identifier transfer)) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier msg))) . (identifier sender)) , (expression (primaryExpression (identifier amount))))) )))) )) ;))) })))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier Withdraw))) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier token))) , (expression (expression (primaryExpression (identifier msg))) . (identifier sender)) , (expression (primaryExpression (identifier amount))) , (expression (expression (expression (primaryExpression (identifier balances))) [ (expression (primaryExpression (identifier token))) ]) [ (expression (expression (primaryExpression (identifier msg))) . (identifier sender)) ]))) )) ;))) }))) (contractPart (functionDefinition function (identifier lockMe) (parameterList ( )) (modifierList external) (block { (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier require))) ( (functionCallArguments (expressionList (expression (expression (expression (primaryExpression (identifier userAddress2Id))) [ (expression (expression (primaryExpression (identifier msg))) . (identifier sender)) ]) != (expression (primaryExpression (numberLiteral 0)))))) )) ;))) (statement (simpleStatement (expressionStatement (expression (expression (expression (primaryExpression (identifier userLock))) [ (expression (expression (primaryExpression (identifier msg))) . (identifier sender)) ]) = (expression (expression (expression (primaryExpression (identifier getTime))) ( functionCallArguments )) + (expression (primaryExpression (identifier lockPeriod))))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier Lock))) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier msg))) . (identifier sender)) , (expression (expression (primaryExpression (identifier userLock))) [ (expression (expression (primaryExpression (identifier msg))) . (identifier sender)) ]))) )) ;))) }))) (contractPart (functionDefinition function (identifier unlockMe) (parameterList ( )) (modifierList external) (block { (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier require))) ( (functionCallArguments (expressionList (expression (expression (expression (primaryExpression (identifier userAddress2Id))) [ (expression (expression (primaryExpression (identifier msg))) . (identifier sender)) ]) != (expression (primaryExpression (numberLiteral 0)))))) )) ;))) (statement (simpleStatement (expressionStatement (expression (expression (expression (primaryExpression (identifier userLock))) [ (expression (expression (primaryExpression (identifier msg))) . (identifier sender)) ]) = (expression (primaryExpression (numberLiteral 0)))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier Lock))) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier msg))) . (identifier sender)) , (expression (primaryExpression (numberLiteral 0))))) )) ;))) }))) (contractPart (functionDefinition function (identifier setTradeEventEnabled) (parameterList ( (parameter (typeName (elementaryTypeName bool)) (identifier enabled)) )) (modifierList external (modifierInvocation (identifier onlyOwner))) (block { (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier tradeEventEnabled))) = (expression (primaryExpression (identifier enabled)))) ;))) }))) (contractPart (functionDefinition function (identifier addToAdmin) (parameterList ( (parameter (typeName (elementaryTypeName address)) (identifier admin)) , (parameter (typeName (elementaryTypeName bool)) (identifier isAdd)) )) (modifierList external (modifierInvocation (identifier onlyOwner))) (block { (statement (simpleStatement (expressionStatement (expression (expression (expression (primaryExpression (identifier isAdmin))) [ (expression (primaryExpression (identifier admin))) ]) = (expression (primaryExpression (identifier isAdd)))) ;))) }))) (contractPart (functionDefinition function (identifier collectFee) (parameterList ( (parameter (typeName (elementaryTypeName address)) (identifier token)) )) (modifierList external (modifierInvocation (identifier onlyOwner))) (block { (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint256)) (identifier amount)) = (expression (expression (expression (primaryExpression (identifier balances))) [ (expression (primaryExpression (identifier token))) ]) [ (expression (primaryExpression (identifier joysoWallet))) ]) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier require))) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier amount))) > (expression (primaryExpression (numberLiteral 0)))))) )) ;))) (statement (simpleStatement (expressionStatement (expression (expression (expression (expression (primaryExpression (identifier balances))) [ (expression (primaryExpression (identifier token))) ]) [ (expression (primaryExpression (identifier joysoWallet))) ]) = (expression (primaryExpression (numberLiteral 0)))) ;))) (statement (ifStatement if ( (expression (expression (primaryExpression (identifier token))) == (expression (primaryExpression (numberLiteral 0)))) ) (statement (block { (statement (simpleStatement (expressionStatement (expression (expression (expression (expression (primaryExpression (identifier msg))) . (identifier sender)) . (identifier transfer)) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier amount))))) )) ;))) })) else (statement (block { (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier require))) ( (functionCallArguments (expressionList (expression (expression (expression (expression (primaryExpression (identifier ERC20))) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier token))))) )) . (identifier transfer)) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier msg))) . (identifier sender)) , (expression (primaryExpression (identifier amount))))) )))) )) ;))) })))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier Withdraw))) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier token))) , (expression (primaryExpression (identifier joysoWallet))) , (expression (primaryExpression (identifier amount))) , (expression (primaryExpression (numberLiteral 0))))) )) ;))) }))) (contractPart (functionDefinition function (identifier changeLockPeriod) (parameterList ( (parameter (typeName (elementaryTypeName uint256)) (identifier periodInDays)) )) (modifierList external (modifierInvocation (identifier onlyOwner))) (block { (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier require))) ( (functionCallArguments (expressionList (expression (expression (expression (primaryExpression (identifier periodInDays))) <= (expression (primaryExpression (numberLiteral 30)))) && (expression (expression (primaryExpression (identifier periodInDays))) >= (expression (primaryExpression (numberLiteral 1))))))) )) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier lockPeriod))) = (expression (primaryExpression (identifier periodInDays)))) <missing ';'>))) }))) (contractPart (functionDefinition function (identifier registerToken) (parameterList ( (parameter (typeName (elementaryTypeName address)) (identifier tokenAddress)) , (parameter (typeName (elementaryTypeName uint256)) (identifier index)) )) (modifierList external (modifierInvocation (identifier onlyAdmin))) (block { (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier require))) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier index))) > (expression (primaryExpression (numberLiteral 1)))))) )) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier require))) ( (functionCallArguments (expressionList (expression (expression (expression (primaryExpression (identifier tokenAddress2Id))) [ (expression (primaryExpression (identifier tokenAddress))) ]) == (expression (primaryExpression (numberLiteral 0)))))) )) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier require))) ( (functionCallArguments (expressionList (expression (expression (expression (primaryExpression (identifier tokenId2Address))) [ (expression (primaryExpression (identifier index))) ]) == (expression (primaryExpression (numberLiteral 0)))))) )) ;))) (statement (simpleStatement (expressionStatement (expression (expression (expression (primaryExpression (identifier tokenAddress2Id))) [ (expression (primaryExpression (identifier tokenAddress))) ]) = (expression (primaryExpression (identifier index)))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (expression (primaryExpression (identifier tokenId2Address))) [ (expression (primaryExpression (identifier index))) ]) = (expression (primaryExpression (identifier tokenAddress)))) ;))) }))) (contractPart (functionDefinition function (identifier withdrawByAdmin_Unau) (parameterList ( (parameter (typeName (typeName (elementaryTypeName uint256)) [ ]) (identifier inputs)) )) (modifierList external (modifierInvocation (identifier onlyAdmin))) (block { (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint256)) (identifier amount)) = (expression (expression (primaryExpression (identifier inputs))) [ (expression (primaryExpression (numberLiteral 0))) ]) ;))) (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint256)) (identifier gasFee)) = (expression (expression (primaryExpression (identifier inputs))) [ (expression (primaryExpression (numberLiteral 1))) ]) ;))) (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint256)) (identifier data)) = (expression (expression (primaryExpression (identifier inputs))) [ (expression (primaryExpression (numberLiteral 2))) ]) ;))) (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint256)) (identifier paymentMethod)) = (expression (expression (primaryExpression (identifier data))) & (expression (primaryExpression (identifier PAYMENT_METHOD_MASK)))) ;))) (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName address)) (identifier token)) = (expression (expression (primaryExpression (identifier tokenId2Address))) [ (expression (expression ( (expression (expression (primaryExpression (identifier data))) & (expression (primaryExpression (identifier WITHDRAW_TOKEN_MASK)))) )) >> (expression (primaryExpression (numberLiteral 32)))) ]) ;))) (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName address)) (identifier user)) = (expression (expression (primaryExpression (identifier userId2Address))) [ (expression (expression (primaryExpression (identifier data))) & (expression (primaryExpression (identifier USER_MASK)))) ]) ;))) (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName bytes32)) (identifier hash)) = (expression (expression (primaryExpression (identifier keccak256))) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier this))) , (expression (primaryExpression (identifier amount))) , (expression (primaryExpression (identifier gasFee))) , (expression (expression (expression (primaryExpression (identifier data))) & (expression (primaryExpression (identifier SIGN_MASK)))) | (expression (expression (primaryExpression (elementaryTypeNameExpression (elementaryTypeName uint256)))) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier token))))) ))))) )) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier require))) ( (functionCallArguments (expressionList (expression ! (expression (expression (primaryExpression (identifier usedHash))) [ (expression (primaryExpression (identifier hash))) ])))) )) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier require))) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier verify))) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier hash))) , (expression (primaryExpression (identifier user))) , (expression (expression (primaryExpression (elementaryTypeNameExpression (elementaryTypeName uint8)))) ( (functionCallArguments (expressionList (expression (expression (expression (expression (primaryExpression (identifier data))) & (expression (primaryExpression (identifier V_MASK)))) == (expression (primaryExpression (numberLiteral 0)))) ? (expression (primaryExpression (numberLiteral 27))) : (expression (primaryExpression (numberLiteral 28)))))) )) , (expression (expression (primaryExpression (elementaryTypeNameExpression (elementaryTypeName bytes32)))) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier inputs))) [ (expression (primaryExpression (numberLiteral 3))) ]))) )) , (expression (expression (primaryExpression (elementaryTypeNameExpression (elementaryTypeName bytes32)))) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier inputs))) [ (expression (primaryExpression (numberLiteral 4))) ]))) )))) )))) )) ;))) (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName address)) (identifier gasToken)) = (expression (primaryExpression (numberLiteral 0))) ;))) (statement (ifStatement if ( (expression (expression (primaryExpression (identifier paymentMethod))) == (expression (primaryExpression (identifier PAY_BY_JOY)))) ) (statement (block { (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier gasToken))) = (expression (primaryExpression (identifier joyToken)))) ;))) })) else (statement (ifStatement if ( (expression (expression (primaryExpression (identifier paymentMethod))) == (expression (primaryExpression (identifier PAY_BY_TOKEN)))) ) (statement (block { (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier gasToken))) = (expression (primaryExpression (identifier token)))) ;))) })))))) (statement (ifStatement if ( (expression (expression (primaryExpression (identifier gasToken))) == (expression (primaryExpression (identifier token)))) ) (statement (block { (statement (simpleStatement (expressionStatement (expression (expression (expression (expression (primaryExpression (identifier balances))) [ (expression (primaryExpression (identifier token))) ]) [ (expression (primaryExpression (identifier user))) ]) = (expression (expression (expression (expression (expression (primaryExpression (identifier balances))) [ (expression (primaryExpression (identifier token))) ]) [ (expression (primaryExpression (identifier user))) ]) . (identifier sub)) ( (functionCallArguments (expressionList (expression (expression (expression (primaryExpression (identifier amount))) . (identifier add)) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier gasFee))))) )))) ))) ;))) })) else (statement (block { (statement (simpleStatement (expressionStatement (expression (expression (expression (expression (primaryExpression (identifier balances))) [ (expression (primaryExpression (identifier token))) ]) [ (expression (primaryExpression (identifier user))) ]) = (expression (expression (expression (expression (expression (primaryExpression (identifier balances))) [ (expression (primaryExpression (identifier token))) ]) [ (expression (primaryExpression (identifier user))) ]) . (identifier sub)) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier amount))))) ))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (expression (expression (primaryExpression (identifier balances))) [ (expression (primaryExpression (identifier gasToken))) ]) [ (expression (primaryExpression (identifier user))) ]) = (expression (expression (expression (expression (expression (primaryExpression (identifier balances))) [ (expression (primaryExpression (identifier gasToken))) ]) [ (expression (primaryExpression (identifier user))) ]) . (identifier sub)) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier gasFee))))) ))) ;))) })))) (statement (simpleStatement (expressionStatement (expression (expression (expression (expression (primaryExpression (identifier balances))) [ (expression (primaryExpression (identifier gasToken))) ]) [ (expression (primaryExpression (identifier joysoWallet))) ]) = (expression (expression (expression (expression (expression (primaryExpression (identifier balances))) [ (expression (primaryExpression (identifier gasToken))) ]) [ (expression (primaryExpression (identifier joysoWallet))) ]) . (identifier add)) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier gasFee))))) ))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (expression (primaryExpression (identifier usedHash))) [ (expression (primaryExpression (identifier hash))) ]) = (expression (primaryExpression true))) ;))) (statement (ifStatement if ( (expression (expression (primaryExpression (identifier token))) == (expression (primaryExpression (numberLiteral 0)))) ) (statement (block { (statement (simpleStatement (expressionStatement (expression (expression (expression (primaryExpression (identifier user))) . (identifier transfer)) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier amount))))) )) ;))) })) else (statement (block { (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier require))) ( (functionCallArguments (expressionList (expression (expression (expression (expression (primaryExpression (identifier ERC20))) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier token))))) )) . (identifier transfer)) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier user))) , (expression (primaryExpression (identifier amount))))) )))) )) ;))) })))) }))) (contractPart (functionDefinition function (identifier matchByAdmin_TwH36) (parameterList ( (parameter (typeName (typeName (elementaryTypeName uint256)) [ ]) (identifier inputs)) )) (modifierList external (modifierInvocation (identifier onlyAdmin))) (block { (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint256)) (identifier data)) = (expression (expression (primaryExpression (identifier inputs))) [ (expression (primaryExpression (numberLiteral 3))) ]) ;))) (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName address)) (identifier user)) = (expression (expression (primaryExpression (identifier userId2Address))) [ (expression (expression (primaryExpression (identifier data))) & (expression (primaryExpression (identifier USER_MASK)))) ]) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier require))) ( (functionCallArguments (expressionList (expression (expression (expression (primaryExpression (identifier data))) >> (expression (primaryExpression (numberLiteral 224)))) > (expression (expression (primaryExpression (identifier userNonce))) [ (expression (primaryExpression (identifier user))) ])))) )) ;))) (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName address)) (identifier token)) ;))) (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName bool)) (identifier isBuy)) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (tupleExpression ( (expression (primaryExpression (identifier token))) , (expression (primaryExpression (identifier isBuy))) )))) = (expression (expression (primaryExpression (identifier decodeOrderTokenAndIsBuy))) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier data))))) ))) ;))) (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName bytes32)) (identifier orderHash)) = (expression (expression (primaryExpression (identifier keccak256))) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier this))) , (expression (expression (primaryExpression (identifier inputs))) [ (expression (primaryExpression (numberLiteral 0))) ]) , (expression (expression (primaryExpression (identifier inputs))) [ (expression (primaryExpression (numberLiteral 1))) ]) , (expression (expression (primaryExpression (identifier inputs))) [ (expression (primaryExpression (numberLiteral 2))) ]) , (expression (expression (expression (expression (primaryExpression (identifier data))) & (expression (primaryExpression (identifier MATCH_SIGN_MASK)))) | (expression ( (expression (expression (primaryExpression (identifier isBuy))) ? (expression (primaryExpression (identifier ORDER_ISBUY))) : (expression (primaryExpression (numberLiteral 0)))) ))) | (expression (expression (primaryExpression (elementaryTypeNameExpression (elementaryTypeName uint256)))) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier token))))) ))))) )) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier require))) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier verify))) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier orderHash))) , (expression (primaryExpression (identifier user))) , (expression (expression (primaryExpression (elementaryTypeNameExpression (elementaryTypeName uint8)))) ( (functionCallArguments (expressionList (expression (expression (expression (expression (primaryExpression (identifier data))) & (expression (primaryExpression (identifier V_MASK)))) == (expression (primaryExpression (numberLiteral 0)))) ? (expression (primaryExpression (numberLiteral 27))) : (expression (primaryExpression (numberLiteral 28)))))) )) , (expression (expression (primaryExpression (elementaryTypeNameExpression (elementaryTypeName bytes32)))) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier inputs))) [ (expression (primaryExpression (numberLiteral 4))) ]))) )) , (expression (expression (primaryExpression (elementaryTypeNameExpression (elementaryTypeName bytes32)))) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier inputs))) [ (expression (primaryExpression (numberLiteral 5))) ]))) )))) )))) )) ;))) (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint256)) (identifier tokenExecute)) = (expression (expression (primaryExpression (identifier isBuy))) ? (expression (expression (primaryExpression (identifier inputs))) [ (expression (primaryExpression (numberLiteral 1))) ]) : (expression (expression (primaryExpression (identifier inputs))) [ (expression (primaryExpression (numberLiteral 0))) ])) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier tokenExecute))) = (expression (expression (expression (primaryExpression (identifier tokenExecute))) . (identifier sub)) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier orderFills))) [ (expression (primaryExpression (identifier orderHash))) ]))) ))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier require))) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier tokenExecute))) != (expression (primaryExpression (numberLiteral 0)))))) )) ;))) (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint256)) (identifier etherExecute)) = (expression (primaryExpression (numberLiteral 0))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier isBuy))) = (expression ! (expression (primaryExpression (identifier isBuy))))) ;))) (statement (forStatement for ( (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint256)) (identifier i)) = (expression (primaryExpression (numberLiteral 6))) ;)) (expression (expression (primaryExpression (identifier i))) < (expression (expression (primaryExpression (identifier inputs))) . (identifier length))) ; (expression (expression (primaryExpression (identifier i))) += (expression (primaryExpression (numberLiteral 6)))) ) (statement (block { (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier require))) ( (functionCallArguments (expressionList (expression (expression (expression (primaryExpression (identifier tokenExecute))) > (expression (primaryExpression (numberLiteral 0)))) && (expression (expression (expression (expression (expression (primaryExpression (identifier inputs))) [ (expression (primaryExpression (numberLiteral 1))) ]) . (identifier mul)) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier inputs))) [ (expression (expression (primaryExpression (identifier i))) + (expression (primaryExpression (numberLiteral 1)))) ]))) )) <= (expression (expression (expression (expression (primaryExpression (identifier inputs))) [ (expression (primaryExpression (numberLiteral 0))) ]) . (identifier mul)) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier inputs))) [ (expression (primaryExpression (identifier i))) ]))) )))))) )) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier data))) = (expression (expression (primaryExpression (identifier inputs))) [ (expression (expression (primaryExpression (identifier i))) + (expression (primaryExpression (numberLiteral 3)))) ])) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier user))) = (expression (expression (primaryExpression (identifier userId2Address))) [ (expression (expression (primaryExpression (identifier data))) & (expression (primaryExpression (identifier USER_MASK)))) ])) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier require))) ( (functionCallArguments (expressionList (expression (expression (expression (primaryExpression (identifier data))) >> (expression (primaryExpression (numberLiteral 224)))) > (expression (expression (primaryExpression (identifier userNonce))) [ (expression (primaryExpression (identifier user))) ])))) )) ;))) (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName bytes32)) (identifier makerOrderHash)) = (expression (expression (primaryExpression (identifier keccak256))) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier this))) , (expression (expression (primaryExpression (identifier inputs))) [ (expression (primaryExpression (identifier i))) ]) , (expression (expression (primaryExpression (identifier inputs))) [ (expression (expression (primaryExpression (identifier i))) + (expression (primaryExpression (numberLiteral 1)))) ]) , (expression (expression (primaryExpression (identifier inputs))) [ (expression (expression (primaryExpression (identifier i))) + (expression (primaryExpression (numberLiteral 2)))) ]) , (expression (expression (expression (expression (primaryExpression (identifier data))) & (expression (primaryExpression (identifier MATCH_SIGN_MASK)))) | (expression ( (expression (expression (primaryExpression (identifier isBuy))) ? (expression (primaryExpression (identifier ORDER_ISBUY))) : (expression (primaryExpression (numberLiteral 0)))) ))) | (expression (expression (primaryExpression (elementaryTypeNameExpression (elementaryTypeName uint256)))) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier token))))) ))))) )) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier require))) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier verify))) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier makerOrderHash))) , (expression (primaryExpression (identifier user))) , (expression (expression (primaryExpression (elementaryTypeNameExpression (elementaryTypeName uint8)))) ( (functionCallArguments (expressionList (expression (expression (expression (expression (primaryExpression (identifier data))) & (expression (primaryExpression (identifier V_MASK)))) == (expression (primaryExpression (numberLiteral 0)))) ? (expression (primaryExpression (numberLiteral 27))) : (expression (primaryExpression (numberLiteral 28)))))) )) , (expression (expression (primaryExpression (elementaryTypeNameExpression (elementaryTypeName bytes32)))) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier inputs))) [ (expression (expression (primaryExpression (identifier i))) + (expression (primaryExpression (numberLiteral 4)))) ]))) )) , (expression (expression (primaryExpression (elementaryTypeNameExpression (elementaryTypeName bytes32)))) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier inputs))) [ (expression (expression (primaryExpression (identifier i))) + (expression (primaryExpression (numberLiteral 5)))) ]))) )))) )))) )) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (tupleExpression ( (expression (primaryExpression (identifier tokenExecute))) , (expression (primaryExpression (identifier etherExecute))) )))) = (expression (expression (primaryExpression (identifier internalTrade))) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier inputs))) [ (expression (primaryExpression (identifier i))) ]) , (expression (expression (primaryExpression (identifier inputs))) [ (expression (expression (primaryExpression (identifier i))) + (expression (primaryExpression (numberLiteral 1)))) ]) , (expression (expression (primaryExpression (identifier inputs))) [ (expression (expression (primaryExpression (identifier i))) + (expression (primaryExpression (numberLiteral 2)))) ]) , (expression (primaryExpression (identifier data))) , (expression (primaryExpression (identifier tokenExecute))) , (expression (primaryExpression (identifier etherExecute))) , (expression (primaryExpression (identifier isBuy))) , (expression (primaryExpression (identifier token))) , (expression (primaryExpression (numberLiteral 0))) , (expression (primaryExpression (identifier makerOrderHash))))) ))) ;))) })))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier isBuy))) = (expression ! (expression (primaryExpression (identifier isBuy))))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier tokenExecute))) = (expression (expression (primaryExpression (identifier isBuy))) ? (expression (expression (expression (expression (primaryExpression (identifier inputs))) [ (expression (primaryExpression (numberLiteral 1))) ]) . (identifier sub)) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier tokenExecute))))) )) : (expression (expression (expression (expression (primaryExpression (identifier inputs))) [ (expression (primaryExpression (numberLiteral 0))) ]) . (identifier sub)) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier tokenExecute))))) )))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier tokenExecute))) = (expression (expression (expression (primaryExpression (identifier tokenExecute))) . (identifier sub)) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier orderFills))) [ (expression (primaryExpression (identifier orderHash))) ]))) ))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier processTakerOrder))) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier inputs))) [ (expression (primaryExpression (numberLiteral 2))) ]) , (expression (expression (primaryExpression (identifier inputs))) [ (expression (primaryExpression (numberLiteral 3))) ]) , (expression (primaryExpression (identifier tokenExecute))) , (expression (primaryExpression (identifier etherExecute))) , (expression (primaryExpression (identifier isBuy))) , (expression (primaryExpression (identifier token))) , (expression (primaryExpression (numberLiteral 0))) , (expression (primaryExpression (identifier orderHash))))) )) ;))) }))) (contractPart (functionDefinition function (identifier matchTokenOrderByAdmin_k44j) (parameterList ( (parameter (typeName (typeName (elementaryTypeName uint256)) [ ]) (identifier inputs)) )) (modifierList external (modifierInvocation (identifier onlyAdmin))) (block { (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName address)) (identifier user)) = (expression (expression (primaryExpression (identifier userId2Address))) [ (expression (expression (primaryExpression (identifier decodeOrderUserId))) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier inputs))) [ (expression (primaryExpression (numberLiteral 3))) ]))) )) ]) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier require))) ( (functionCallArguments (expressionList (expression (expression (expression (expression (primaryExpression (identifier inputs))) [ (expression (primaryExpression (numberLiteral 3))) ]) >> (expression (primaryExpression (numberLiteral 224)))) > (expression (expression (primaryExpression (identifier userNonce))) [ (expression (primaryExpression (identifier user))) ])))) )) ;))) (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName address)) (identifier token)) ;))) (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName address)) (identifier base)) ;))) (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName bool)) (identifier isBuy)) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (tupleExpression ( (expression (primaryExpression (identifier token))) , (expression (primaryExpression (identifier base))) , (expression (primaryExpression (identifier isBuy))) )))) = (expression (expression (primaryExpression (identifier decodeTokenOrderTokenAndIsBuy))) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier inputs))) [ (expression (primaryExpression (numberLiteral 3))) ]))) ))) ;))) (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName bytes32)) (identifier orderHash)) = (expression (expression (primaryExpression (identifier getTokenOrderDataHash))) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier inputs))) , (expression (primaryExpression (numberLiteral 0))) , (expression (expression (primaryExpression (identifier inputs))) [ (expression (primaryExpression (numberLiteral 3))) ]) , (expression (primaryExpression (identifier token))) , (expression (primaryExpression (identifier base))))) )) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier require))) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier verify))) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier orderHash))) , (expression (primaryExpression (identifier user))) , (expression (expression (primaryExpression (elementaryTypeNameExpression (elementaryTypeName uint8)))) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier retrieveV))) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier inputs))) [ (expression (primaryExpression (numberLiteral 3))) ]))) )))) )) , (expression (expression (primaryExpression (elementaryTypeNameExpression (elementaryTypeName bytes32)))) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier inputs))) [ (expression (primaryExpression (numberLiteral 4))) ]))) )) , (expression (expression (primaryExpression (elementaryTypeNameExpression (elementaryTypeName bytes32)))) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier inputs))) [ (expression (primaryExpression (numberLiteral 5))) ]))) )))) )))) )) ;))) (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint256)) (identifier tokenExecute)) = (expression (expression (primaryExpression (identifier isBuy))) ? (expression (expression (primaryExpression (identifier inputs))) [ (expression (primaryExpression (numberLiteral 1))) ]) : (expression (expression (primaryExpression (identifier inputs))) [ (expression (primaryExpression (numberLiteral 0))) ])) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier tokenExecute))) = (expression (expression (expression (primaryExpression (identifier tokenExecute))) . (identifier sub)) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier orderFills))) [ (expression (primaryExpression (identifier orderHash))) ]))) ))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier require))) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier tokenExecute))) != (expression (primaryExpression (numberLiteral 0)))))) )) ;))) (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint256)) (identifier baseExecute)) = (expression (primaryExpression (numberLiteral 0))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier isBuy))) = (expression ! (expression (primaryExpression (identifier isBuy))))) ;))) (statement (forStatement for ( (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint256)) (identifier i)) = (expression (primaryExpression (numberLiteral 6))) ;)) (expression (expression (primaryExpression (identifier i))) < (expression (expression (primaryExpression (identifier inputs))) . (identifier length))) ; (expression (expression (primaryExpression (identifier i))) += (expression (primaryExpression (numberLiteral 6)))) ) (statement (block { (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier require))) ( (functionCallArguments (expressionList (expression (expression (expression (primaryExpression (identifier tokenExecute))) > (expression (primaryExpression (numberLiteral 0)))) && (expression (expression (expression (expression (expression (primaryExpression (identifier inputs))) [ (expression (primaryExpression (numberLiteral 1))) ]) . (identifier mul)) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier inputs))) [ (expression (expression (primaryExpression (identifier i))) + (expression (primaryExpression (numberLiteral 1)))) ]))) )) <= (expression (expression (expression (expression (primaryExpression (identifier inputs))) [ (expression (primaryExpression (numberLiteral 0))) ]) . (identifier mul)) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier inputs))) [ (expression (primaryExpression (identifier i))) ]))) )))))) )) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier user))) = (expression (expression (primaryExpression (identifier userId2Address))) [ (expression (expression (primaryExpression (identifier decodeOrderUserId))) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier inputs))) [ (expression (expression (primaryExpression (identifier i))) + (expression (primaryExpression (numberLiteral 3)))) ]))) )) ])) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier require))) ( (functionCallArguments (expressionList (expression (expression (expression (expression (primaryExpression (identifier inputs))) [ (expression (expression (primaryExpression (identifier i))) + (expression (primaryExpression (numberLiteral 3)))) ]) >> (expression (primaryExpression (numberLiteral 224)))) > (expression (expression (primaryExpression (identifier userNonce))) [ (expression (primaryExpression (identifier user))) ])))) )) ;))) (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName bytes32)) (identifier makerOrderHash)) = (expression (expression (primaryExpression (identifier getTokenOrderDataHash))) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier inputs))) , (expression (primaryExpression (identifier i))) , (expression (expression (primaryExpression (identifier inputs))) [ (expression (expression (primaryExpression (identifier i))) + (expression (primaryExpression (numberLiteral 3)))) ]) , (expression (primaryExpression (identifier token))) , (expression (primaryExpression (identifier base))))) )) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier require))) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier verify))) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier makerOrderHash))) , (expression (primaryExpression (identifier user))) , (expression (expression (primaryExpression (elementaryTypeNameExpression (elementaryTypeName uint8)))) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier retrieveV))) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier inputs))) [ (expression (expression (primaryExpression (identifier i))) + (expression (primaryExpression (numberLiteral 3)))) ]))) )))) )) , (expression (expression (primaryExpression (elementaryTypeNameExpression (elementaryTypeName bytes32)))) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier inputs))) [ (expression (expression (primaryExpression (identifier i))) + (expression (primaryExpression (numberLiteral 4)))) ]))) )) , (expression (expression (primaryExpression (elementaryTypeNameExpression (elementaryTypeName bytes32)))) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier inputs))) [ (expression (expression (primaryExpression (identifier i))) + (expression (primaryExpression (numberLiteral 5)))) ]))) )))) )))) )) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (tupleExpression ( (expression (primaryExpression (identifier tokenExecute))) , (expression (primaryExpression (identifier baseExecute))) )))) = (expression (expression (primaryExpression (identifier internalTrade))) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier inputs))) [ (expression (primaryExpression (identifier i))) ]) , (expression (expression (primaryExpression (identifier inputs))) [ (expression (expression (primaryExpression (identifier i))) + (expression (primaryExpression (numberLiteral 1)))) ]) , (expression (expression (primaryExpression (identifier inputs))) [ (expression (expression (primaryExpression (identifier i))) + (expression (primaryExpression (numberLiteral 2)))) ]) , (expression (expression (primaryExpression (identifier inputs))) [ (expression (expression (primaryExpression (identifier i))) + (expression (primaryExpression (numberLiteral 3)))) ]) , (expression (primaryExpression (identifier tokenExecute))) , (expression (primaryExpression (identifier baseExecute))) , (expression (primaryExpression (identifier isBuy))) , (expression (primaryExpression (identifier token))) , (expression (primaryExpression (identifier base))) , (expression (primaryExpression (identifier makerOrderHash))))) ))) ;))) })))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier isBuy))) = (expression ! (expression (primaryExpression (identifier isBuy))))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier tokenExecute))) = (expression (expression (primaryExpression (identifier isBuy))) ? (expression (expression (expression (expression (primaryExpression (identifier inputs))) [ (expression (primaryExpression (numberLiteral 1))) ]) . (identifier sub)) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier tokenExecute))))) )) : (expression (expression (expression (expression (primaryExpression (identifier inputs))) [ (expression (primaryExpression (numberLiteral 0))) ]) . (identifier sub)) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier tokenExecute))))) )))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier tokenExecute))) = (expression (expression (expression (primaryExpression (identifier tokenExecute))) . (identifier sub)) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier orderFills))) [ (expression (primaryExpression (identifier orderHash))) ]))) ))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier processTakerOrder))) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier inputs))) [ (expression (primaryExpression (numberLiteral 2))) ]) , (expression (expression (primaryExpression (identifier inputs))) [ (expression (primaryExpression (numberLiteral 3))) ]) , (expression (primaryExpression (identifier tokenExecute))) , (expression (primaryExpression (identifier baseExecute))) , (expression (primaryExpression (identifier isBuy))) , (expression (primaryExpression (identifier token))) , (expression (primaryExpression (identifier base))) , (expression (primaryExpression (identifier orderHash))))) )) ;))) }))) (contractPart (functionDefinition function (identifier cancelByAdmin) (parameterList ( (parameter (typeName (typeName (elementaryTypeName uint256)) [ ]) (identifier inputs)) )) (modifierList external (modifierInvocation (identifier onlyAdmin))) (block { (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint256)) (identifier data)) = (expression (expression (primaryExpression (identifier inputs))) [ (expression (primaryExpression (numberLiteral 1))) ]) ;))) (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint256)) (identifier nonce)) = (expression (expression (primaryExpression (identifier data))) >> (expression (primaryExpression (numberLiteral 224)))) ;))) (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName address)) (identifier user)) = (expression (expression (primaryExpression (identifier userId2Address))) [ (expression (expression (primaryExpression (identifier data))) & (expression (primaryExpression (identifier USER_MASK)))) ]) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier require))) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier nonce))) > (expression (expression (primaryExpression (identifier userNonce))) [ (expression (primaryExpression (identifier user))) ])))) )) ;))) (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint256)) (identifier gasFee)) = (expression (expression (primaryExpression (identifier inputs))) [ (expression (primaryExpression (numberLiteral 0))) ]) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier require))) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier verify))) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier keccak256))) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier this))) , (expression (primaryExpression (identifier gasFee))) , (expression (expression (primaryExpression (identifier data))) & (expression (primaryExpression (identifier SIGN_MASK)))))) )) , (expression (primaryExpression (identifier user))) , (expression (expression (primaryExpression (elementaryTypeNameExpression (elementaryTypeName uint8)))) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier retrieveV))) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier data))))) )))) )) , (expression (expression (primaryExpression (elementaryTypeNameExpression (elementaryTypeName bytes32)))) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier inputs))) [ (expression (primaryExpression (numberLiteral 2))) ]))) )) , (expression (expression (primaryExpression (elementaryTypeNameExpression (elementaryTypeName bytes32)))) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier inputs))) [ (expression (primaryExpression (numberLiteral 3))) ]))) )))) )))) )) ;))) (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName address)) (identifier gasToken)) = (expression (primaryExpression (numberLiteral 0))) ;))) (statement (ifStatement if ( (expression (expression (expression (primaryExpression (identifier data))) & (expression (primaryExpression (identifier PAYMENT_METHOD_MASK)))) == (expression (primaryExpression (identifier PAY_BY_JOY)))) ) (statement (block { (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier gasToken))) = (expression (primaryExpression (identifier joyToken)))) ;))) })))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier require))) ( (functionCallArguments (expressionList (expression (expression (expression (expression (primaryExpression (identifier balances))) [ (expression (primaryExpression (identifier gasToken))) ]) [ (expression (primaryExpression (identifier user))) ]) >= (expression (primaryExpression (identifier gasFee)))))) )) ;))) (statement (simpleStatement (expressionStatement (expression (expression (expression (expression (primaryExpression (identifier balances))) [ (expression (primaryExpression (identifier gasToken))) ]) [ (expression (primaryExpression (identifier user))) ]) = (expression (expression (expression (expression (expression (primaryExpression (identifier balances))) [ (expression (primaryExpression (identifier gasToken))) ]) [ (expression (primaryExpression (identifier user))) ]) . (identifier sub)) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier gasFee))))) ))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (expression (expression (primaryExpression (identifier balances))) [ (expression (primaryExpression (identifier gasToken))) ]) [ (expression (primaryExpression (identifier joysoWallet))) ]) = (expression (expression (expression (expression (expression (primaryExpression (identifier balances))) [ (expression (primaryExpression (identifier gasToken))) ]) [ (expression (primaryExpression (identifier joysoWallet))) ]) . (identifier add)) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier gasFee))))) ))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (expression (primaryExpression (identifier userNonce))) [ (expression (primaryExpression (identifier user))) ]) = (expression (primaryExpression (identifier nonce)))) ;))) }))) (contractPart (functionDefinition function (identifier migrateByAdmin_DQV) (parameterList ( (parameter (typeName (typeName (elementaryTypeName uint256)) [ ]) (identifier inputs)) )) (modifierList external (modifierInvocation (identifier onlyAdmin))) (block { (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint256)) (identifier data)) = (expression (expression (primaryExpression (identifier inputs))) [ (expression (primaryExpression (numberLiteral 2))) ]) ;))) (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName address)) (identifier token)) = (expression (expression (primaryExpression (identifier tokenId2Address))) [ (expression (expression ( (expression (expression (primaryExpression (identifier data))) & (expression (primaryExpression (identifier WITHDRAW_TOKEN_MASK)))) )) >> (expression (primaryExpression (numberLiteral 32)))) ]) ;))) (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName address)) (identifier newContract)) = (expression (expression (primaryExpression (elementaryTypeNameExpression (elementaryTypeName address)))) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier inputs))) [ (expression (primaryExpression (numberLiteral 0))) ]))) )) ;))) (statement (forStatement for ( (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint256)) (identifier i)) = (expression (primaryExpression (numberLiteral 1))) ;)) (expression (expression (primaryExpression (identifier i))) < (expression (expression (primaryExpression (identifier inputs))) . (identifier length))) ; (expression (expression (primaryExpression (identifier i))) += (expression (primaryExpression (numberLiteral 4)))) ) (statement (block { (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint256)) (identifier gasFee)) = (expression (expression (primaryExpression (identifier inputs))) [ (expression (primaryExpression (identifier i))) ]) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier data))) = (expression (expression (primaryExpression (identifier inputs))) [ (expression (expression (primaryExpression (identifier i))) + (expression (primaryExpression (numberLiteral 1)))) ])) ;))) (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName address)) (identifier user)) = (expression (expression (primaryExpression (identifier userId2Address))) [ (expression (expression (primaryExpression (identifier data))) & (expression (primaryExpression (identifier USER_MASK)))) ]) ;))) (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName bytes32)) (identifier hash)) = (expression (expression (primaryExpression (identifier keccak256))) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier this))) , (expression (primaryExpression (identifier gasFee))) , (expression (expression (expression (primaryExpression (identifier data))) & (expression (primaryExpression (identifier SIGN_MASK)))) | (expression (expression (primaryExpression (elementaryTypeNameExpression (elementaryTypeName uint256)))) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier token))))) ))) , (expression (primaryExpression (identifier newContract))))) )) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier require))) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier verify))) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier hash))) , (expression (primaryExpression (identifier user))) , (expression (expression (primaryExpression (elementaryTypeNameExpression (elementaryTypeName uint8)))) ( (functionCallArguments (expressionList (expression (expression (expression (expression (primaryExpression (identifier data))) & (expression (primaryExpression (identifier V_MASK)))) == (expression (primaryExpression (numberLiteral 0)))) ? (expression (primaryExpression (numberLiteral 27))) : (expression (primaryExpression (numberLiteral 28)))))) )) , (expression (expression (primaryExpression (elementaryTypeNameExpression (elementaryTypeName bytes32)))) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier inputs))) [ (expression (expression (primaryExpression (identifier i))) + (expression (primaryExpression (numberLiteral 2)))) ]))) )) , (expression (expression (primaryExpression (elementaryTypeNameExpression (elementaryTypeName bytes32)))) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier inputs))) [ (expression (expression (primaryExpression (identifier i))) + (expression (primaryExpression (numberLiteral 3)))) ]))) )))) )))) )) ;))) (statement (ifStatement if ( (expression (expression (primaryExpression (identifier gasFee))) > (expression (primaryExpression (numberLiteral 0)))) ) (statement (block { (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint256)) (identifier paymentMethod)) = (expression (expression (primaryExpression (identifier data))) & (expression (primaryExpression (identifier PAYMENT_METHOD_MASK)))) ;))) (statement (ifStatement if ( (expression (expression (primaryExpression (identifier paymentMethod))) == (expression (primaryExpression (identifier PAY_BY_JOY)))) ) (statement (block { (statement (simpleStatement (expressionStatement (expression (expression (expression (expression (primaryExpression (identifier balances))) [ (expression (primaryExpression (identifier joyToken))) ]) [ (expression (primaryExpression (identifier user))) ]) = (expression (expression (expression (expression (expression (primaryExpression (identifier balances))) [ (expression (primaryExpression (identifier joyToken))) ]) [ (expression (primaryExpression (identifier user))) ]) . (identifier sub)) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier gasFee))))) ))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (expression (expression (primaryExpression (identifier balances))) [ (expression (primaryExpression (identifier joyToken))) ]) [ (expression (primaryExpression (identifier joysoWallet))) ]) = (expression (expression (expression (expression (expression (primaryExpression (identifier balances))) [ (expression (primaryExpression (identifier joyToken))) ]) [ (expression (primaryExpression (identifier joysoWallet))) ]) . (identifier add)) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier gasFee))))) ))) ;))) })) else (statement (ifStatement if ( (expression (expression (primaryExpression (identifier paymentMethod))) == (expression (primaryExpression (identifier PAY_BY_TOKEN)))) ) (statement (block { (statement (simpleStatement (expressionStatement (expression (expression (expression (expression (primaryExpression (identifier balances))) [ (expression (primaryExpression (identifier token))) ]) [ (expression (primaryExpression (identifier user))) ]) = (expression (expression (expression (expression (expression (primaryExpression (identifier balances))) [ (expression (primaryExpression (identifier token))) ]) [ (expression (primaryExpression (identifier user))) ]) . (identifier sub)) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier gasFee))))) ))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (expression (expression (primaryExpression (identifier balances))) [ (expression (primaryExpression (identifier token))) ]) [ (expression (primaryExpression (identifier joysoWallet))) ]) = (expression (expression (expression (expression (expression (primaryExpression (identifier balances))) [ (expression (primaryExpression (identifier token))) ]) [ (expression (primaryExpression (identifier joysoWallet))) ]) . (identifier add)) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier gasFee))))) ))) ;))) })) else (statement (block { (statement (simpleStatement (expressionStatement (expression (expression (expression (expression (primaryExpression (identifier balances))) [ (expression (primaryExpression (numberLiteral 0))) ]) [ (expression (primaryExpression (identifier user))) ]) = (expression (expression (expression (expression (expression (primaryExpression (identifier balances))) [ (expression (primaryExpression (numberLiteral 0))) ]) [ (expression (primaryExpression (identifier user))) ]) . (identifier sub)) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier gasFee))))) ))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (expression (expression (primaryExpression (identifier balances))) [ (expression (primaryExpression (numberLiteral 0))) ]) [ (expression (primaryExpression (identifier joysoWallet))) ]) = (expression (expression (expression (expression (expression (primaryExpression (identifier balances))) [ (expression (primaryExpression (numberLiteral 0))) ]) [ (expression (primaryExpression (identifier joysoWallet))) ]) . (identifier add)) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier gasFee))))) ))) ;))) })))))) })))) (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint256)) (identifier amount)) = (expression (expression (expression (primaryExpression (identifier balances))) [ (expression (primaryExpression (identifier token))) ]) [ (expression (primaryExpression (identifier user))) ]) ;))) (statement (simpleStatement (expressionStatement (expression (expression (expression (expression (primaryExpression (identifier balances))) [ (expression (primaryExpression (identifier token))) ]) [ (expression (primaryExpression (identifier user))) ]) = (expression (primaryExpression (numberLiteral 0)))) ;))) (statement (ifStatement if ( (expression (expression (primaryExpression (identifier token))) == (expression (primaryExpression (numberLiteral 0)))) ) (statement (block { (statement (simpleStatement (expressionStatement (expression (expression (expression (expression (expression (expression (primaryExpression (identifier Migratable))) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier newContract))))) )) . (identifier migrate)) . (identifier value)) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier amount))))) )) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier user))) , (expression (primaryExpression (identifier amount))) , (expression (primaryExpression (identifier token))))) )) ;))) })) else (statement (block { (statement (simpleStatement (expressionStatement (expression (expression (expression (expression (primaryExpression (identifier ERC20))) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier token))))) )) . (identifier approve)) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier newContract))) , (expression (primaryExpression (identifier amount))))) )) ;))) (statement (simpleStatement (expressionStatement (expression (expression (expression (expression (primaryExpression (identifier Migratable))) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier newContract))))) )) . (identifier migrate)) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier user))) , (expression (primaryExpression (identifier amount))) , (expression (primaryExpression (identifier token))))) )) ;))) })))) })))) }))) (contractPart (functionDefinition function (identifier transferForAdmin) (parameterList ( (parameter (typeName (elementaryTypeName address)) (identifier token)) , (parameter (typeName (elementaryTypeName address)) (identifier account)) , (parameter (typeName (elementaryTypeName uint256)) (identifier amount)) )) (modifierList (modifierInvocation (identifier onlyAdmin)) external) (block { (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier require))) ( (functionCallArguments (expressionList (expression (expression (expression (primaryExpression (identifier tokenAddress2Id))) [ (expression (primaryExpression (identifier token))) ]) != (expression (primaryExpression (numberLiteral 0)))))) )) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier require))) ( (functionCallArguments (expressionList (expression (expression (expression (primaryExpression (identifier userAddress2Id))) [ (expression (expression (primaryExpression (identifier msg))) . (identifier sender)) ]) != (expression (primaryExpression (numberLiteral 0)))))) )) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier addUser))) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier account))))) )) ;))) (statement (simpleStatement (expressionStatement (expression (expression (expression (expression (primaryExpression (identifier balances))) [ (expression (primaryExpression (identifier token))) ]) [ (expression (expression (primaryExpression (identifier msg))) . (identifier sender)) ]) = (expression (expression (expression (expression (expression (primaryExpression (identifier balances))) [ (expression (primaryExpression (identifier token))) ]) [ (expression (expression (primaryExpression (identifier msg))) . (identifier sender)) ]) . (identifier sub)) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier amount))))) ))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (expression (expression (primaryExpression (identifier balances))) [ (expression (primaryExpression (identifier token))) ]) [ (expression (primaryExpression (identifier account))) ]) = (expression (expression (expression (expression (expression (primaryExpression (identifier balances))) [ (expression (primaryExpression (identifier token))) ]) [ (expression (primaryExpression (identifier account))) ]) . (identifier add)) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier amount))))) ))) ;))) }))) (contractPart (functionDefinition function (identifier getBalance) (parameterList ( (parameter (typeName (elementaryTypeName address)) (identifier token)) , (parameter (typeName (elementaryTypeName address)) (identifier account)) )) (modifierList external (stateMutability view)) (returnParameters returns (parameterList ( (parameter (typeName (elementaryTypeName uint256))) ))) (block { (statement (returnStatement return (expression (expression (expression (primaryExpression (identifier balances))) [ (expression (primaryExpression (identifier token))) ]) [ (expression (primaryExpression (identifier account))) ]) ;)) }))) (contractPart (functionDefinition function (identifier decodeOrderTokenAndIsBuy) (parameterList ( (parameter (typeName (elementaryTypeName uint256)) (identifier data)) )) (modifierList internal (stateMutability view)) (returnParameters returns (parameterList ( (parameter (typeName (elementaryTypeName address)) (identifier token)) , (parameter (typeName (elementaryTypeName bool)) (identifier isBuy)) ))) (block { (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint256)) (identifier tokenId)) = (expression (expression ( (expression (expression (primaryExpression (identifier data))) & (expression (primaryExpression (identifier TOKEN_SELL_MASK)))) )) >> (expression (primaryExpression (numberLiteral 48)))) ;))) (statement (ifStatement if ( (expression (expression (primaryExpression (identifier tokenId))) == (expression (primaryExpression (numberLiteral 0)))) ) (statement (block { (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier token))) = (expression (expression (primaryExpression (identifier tokenId2Address))) [ (expression (expression ( (expression (expression (primaryExpression (identifier data))) & (expression (primaryExpression (identifier TOKEN_BUY_MASK)))) )) >> (expression (primaryExpression (numberLiteral 32)))) ])) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier isBuy))) = (expression (primaryExpression true))) ;))) })) else (statement (block { (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier token))) = (expression (expression (primaryExpression (identifier tokenId2Address))) [ (expression (primaryExpression (identifier tokenId))) ])) ;))) })))) }))) (contractPart (functionDefinition function (identifier decodeTokenOrderTokenAndIsBuy) (parameterList ( (parameter (typeName (elementaryTypeName uint256)) (identifier data)) )) (modifierList internal (stateMutability view)) (returnParameters returns (parameterList ( (parameter (typeName (elementaryTypeName address)) (identifier token)) , (parameter (typeName (elementaryTypeName address)) (identifier base)) , (parameter (typeName (elementaryTypeName bool)) (identifier isBuy)) ))) (block { (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier isBuy))) = (expression (expression (expression (primaryExpression (identifier data))) & (expression (primaryExpression (identifier IS_BUY_MASK)))) == (expression (primaryExpression (identifier ORDER_ISBUY))))) ;))) (statement (ifStatement if ( (expression (primaryExpression (identifier isBuy))) ) (statement (block { (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier token))) = (expression (expression (primaryExpression (identifier tokenId2Address))) [ (expression (expression ( (expression (expression (primaryExpression (identifier data))) & (expression (primaryExpression (identifier TOKEN_BUY_MASK)))) )) >> (expression (primaryExpression (numberLiteral 32)))) ])) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier base))) = (expression (expression (primaryExpression (identifier tokenId2Address))) [ (expression (expression ( (expression (expression (primaryExpression (identifier data))) & (expression (primaryExpression (identifier TOKEN_SELL_MASK)))) )) >> (expression (primaryExpression (numberLiteral 48)))) ])) ;))) })) else (statement (block { (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier token))) = (expression (expression (primaryExpression (identifier tokenId2Address))) [ (expression (expression ( (expression (expression (primaryExpression (identifier data))) & (expression (primaryExpression (identifier TOKEN_SELL_MASK)))) )) >> (expression (primaryExpression (numberLiteral 48)))) ])) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier base))) = (expression (expression (primaryExpression (identifier tokenId2Address))) [ (expression (expression ( (expression (expression (primaryExpression (identifier data))) & (expression (primaryExpression (identifier TOKEN_BUY_MASK)))) )) >> (expression (primaryExpression (numberLiteral 32)))) ])) ;))) })))) }))) (contractPart (functionDefinition function (identifier getTime) (parameterList ( )) (modifierList internal (stateMutability view)) (returnParameters returns (parameterList ( (parameter (typeName (elementaryTypeName uint256))) ))) (block { (statement (returnStatement return (expression (primaryExpression (identifier now))) ;)) }))) (contractPart (functionDefinition function (identifier getTokenOrderDataHash) (parameterList ( (parameter (typeName (typeName (elementaryTypeName uint256)) [ ]) (identifier inputs)) , (parameter (typeName (elementaryTypeName uint256)) (identifier offset)) , (parameter (typeName (elementaryTypeName uint256)) (identifier data)) , (parameter (typeName (elementaryTypeName address)) (identifier token)) , (parameter (typeName (elementaryTypeName address)) (identifier base)) )) (modifierList internal (stateMutability view)) (returnParameters returns (parameterList ( (parameter (typeName (elementaryTypeName bytes32))) ))) (block { (statement (returnStatement return (expression (expression (primaryExpression (identifier keccak256))) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier this))) , (expression (expression (primaryExpression (identifier inputs))) [ (expression (primaryExpression (identifier offset))) ]) , (expression (expression (primaryExpression (identifier inputs))) [ (expression (expression (primaryExpression (identifier offset))) + (expression (primaryExpression (numberLiteral 1)))) ]) , (expression (expression (primaryExpression (identifier inputs))) [ (expression (expression (primaryExpression (identifier offset))) + (expression (primaryExpression (numberLiteral 2)))) ]) , (expression (expression (expression (primaryExpression (identifier data))) & (expression (primaryExpression (identifier SIGN_MASK)))) | (expression (expression (primaryExpression (elementaryTypeNameExpression (elementaryTypeName uint256)))) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier token))))) ))) , (expression (primaryExpression (identifier base))) , (expression (expression ( (expression (expression (primaryExpression (identifier data))) & (expression (primaryExpression (identifier TOKEN_JOY_PRICE_MASK)))) )) >> (expression (primaryExpression (numberLiteral 64)))))) )) ;)) }))) (contractPart (functionDefinition function (identifier verify) (parameterList ( (parameter (typeName (elementaryTypeName bytes32)) (identifier hash)) , (parameter (typeName (elementaryTypeName address)) (identifier sender)) , (parameter (typeName (elementaryTypeName uint8)) (identifier v)) , (parameter (typeName (elementaryTypeName bytes32)) (identifier r)) , (parameter (typeName (elementaryTypeName bytes32)) (identifier s)) )) (modifierList internal (stateMutability pure)) (returnParameters returns (parameterList ( (parameter (typeName (elementaryTypeName bool))) ))) (block { (statement (returnStatement return (expression (expression (expression (primaryExpression (identifier ecrecover))) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier keccak256))) ( (functionCallArguments (expressionList (expression (primaryExpression "\x19Ethereum Signed Message:\n32")) , (expression (primaryExpression (identifier hash))))) )) , (expression (primaryExpression (identifier v))) , (expression (primaryExpression (identifier r))) , (expression (primaryExpression (identifier s))))) )) == (expression (primaryExpression (identifier sender)))) ;)) }))) (contractPart (functionDefinition function (identifier addUser) (parameterList ( (parameter (typeName (elementaryTypeName address)) (identifier _address)) )) (modifierList internal) (block { (statement (ifStatement if ( (expression (expression (expression (primaryExpression (identifier userAddress2Id))) [ (expression (primaryExpression (identifier _address))) ]) != (expression (primaryExpression (numberLiteral 0)))) ) (statement (block { (statement (returnStatement return ;)) })))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier userCount))) += (expression (primaryExpression (numberLiteral 1)))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (expression (primaryExpression (identifier userAddress2Id))) [ (expression (primaryExpression (identifier _address))) ]) = (expression (primaryExpression (identifier userCount)))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (expression (primaryExpression (identifier userId2Address))) [ (expression (primaryExpression (identifier userCount))) ]) = (expression (primaryExpression (identifier _address)))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier NewUser))) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier _address))) , (expression (primaryExpression (identifier userCount))))) )) ;))) }))) (contractPart (functionDefinition function (identifier processTakerOrder) (parameterList ( (parameter (typeName (elementaryTypeName uint256)) (identifier gasFee)) , (parameter (typeName (elementaryTypeName uint256)) (identifier data)) , (parameter (typeName (elementaryTypeName uint256)) (identifier tokenExecute)) , (parameter (typeName (elementaryTypeName uint256)) (identifier baseExecute)) , (parameter (typeName (elementaryTypeName bool)) (identifier isBuy)) , (parameter (typeName (elementaryTypeName address)) (identifier token)) , (parameter (typeName (elementaryTypeName address)) (identifier base)) , (parameter (typeName (elementaryTypeName bytes32)) (identifier orderHash)) )) (modifierList internal) (block { (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint256)) (identifier fee)) = (expression (expression (primaryExpression (identifier calculateFee))) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier gasFee))) , (expression (primaryExpression (identifier data))) , (expression (primaryExpression (identifier baseExecute))) , (expression (primaryExpression (identifier orderHash))) , (expression (primaryExpression true)) , (expression (expression (primaryExpression (identifier base))) == (expression (primaryExpression (numberLiteral 0)))))) )) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier updateUserBalance))) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier data))) , (expression (primaryExpression (identifier isBuy))) , (expression (primaryExpression (identifier baseExecute))) , (expression (primaryExpression (identifier tokenExecute))) , (expression (primaryExpression (identifier fee))) , (expression (primaryExpression (identifier token))) , (expression (primaryExpression (identifier base))))) )) ;))) (statement (simpleStatement (expressionStatement (expression (expression (expression (primaryExpression (identifier orderFills))) [ (expression (primaryExpression (identifier orderHash))) ]) = (expression (expression (expression (expression (primaryExpression (identifier orderFills))) [ (expression (primaryExpression (identifier orderHash))) ]) . (identifier add)) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier tokenExecute))))) ))) ;))) (statement (ifStatement if ( (expression (primaryExpression (identifier tradeEventEnabled))) ) (statement (block { (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier TradeSuccess))) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier userId2Address))) [ (expression (expression (primaryExpression (identifier data))) & (expression (primaryExpression (identifier USER_MASK)))) ]) , (expression (primaryExpression (identifier baseExecute))) , (expression (primaryExpression (identifier tokenExecute))) , (expression (primaryExpression (identifier isBuy))) , (expression (primaryExpression (identifier fee))))) )) ;))) })))) }))) (contractPart (functionDefinition function (identifier internalTrade) (parameterList ( (parameter (typeName (elementaryTypeName uint256)) (identifier amountSell)) , (parameter (typeName (elementaryTypeName uint256)) (identifier amountBuy)) , (parameter (typeName (elementaryTypeName uint256)) (identifier gasFee)) , (parameter (typeName (elementaryTypeName uint256)) (identifier data)) , (parameter (typeName (elementaryTypeName uint256)) (identifier _remainingToken)) , (parameter (typeName (elementaryTypeName uint256)) (identifier _baseExecute)) , (parameter (typeName (elementaryTypeName bool)) (identifier isBuy)) , (parameter (typeName (elementaryTypeName address)) (identifier token)) , (parameter (typeName (elementaryTypeName address)) (identifier base)) , (parameter (typeName (elementaryTypeName bytes32)) (identifier orderHash)) )) (modifierList internal) (returnParameters returns (parameterList ( (parameter (typeName (elementaryTypeName uint256)) (identifier remainingToken)) , (parameter (typeName (elementaryTypeName uint256)) (identifier baseExecute)) ))) (block { (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint256)) (identifier tokenGet)) = (expression (expression (primaryExpression (identifier calculateTokenGet))) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier amountSell))) , (expression (primaryExpression (identifier amountBuy))) , (expression (primaryExpression (identifier _remainingToken))) , (expression (primaryExpression (identifier isBuy))) , (expression (primaryExpression (identifier orderHash))))) )) ;))) (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint256)) (identifier baseGet)) = (expression (expression (primaryExpression (identifier calculateBaseGet))) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier amountSell))) , (expression (primaryExpression (identifier amountBuy))) , (expression (primaryExpression (identifier isBuy))) , (expression (primaryExpression (identifier tokenGet))))) )) ;))) (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint256)) (identifier fee)) = (expression (expression (primaryExpression (identifier calculateFee))) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier gasFee))) , (expression (primaryExpression (identifier data))) , (expression (primaryExpression (identifier baseGet))) , (expression (primaryExpression (identifier orderHash))) , (expression (primaryExpression false)) , (expression (expression (primaryExpression (identifier base))) == (expression (primaryExpression (numberLiteral 0)))))) )) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier updateUserBalance))) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier data))) , (expression (primaryExpression (identifier isBuy))) , (expression (primaryExpression (identifier baseGet))) , (expression (primaryExpression (identifier tokenGet))) , (expression (primaryExpression (identifier fee))) , (expression (primaryExpression (identifier token))) , (expression (primaryExpression (identifier base))))) )) ;))) (statement (simpleStatement (expressionStatement (expression (expression (expression (primaryExpression (identifier orderFills))) [ (expression (primaryExpression (identifier orderHash))) ]) = (expression (expression (expression (expression (primaryExpression (identifier orderFills))) [ (expression (primaryExpression (identifier orderHash))) ]) . (identifier add)) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier tokenGet))))) ))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier remainingToken))) = (expression (expression (expression (primaryExpression (identifier _remainingToken))) . (identifier sub)) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier tokenGet))))) ))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier baseExecute))) = (expression (expression (expression (primaryExpression (identifier _baseExecute))) . (identifier add)) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier baseGet))))) ))) ;))) (statement (ifStatement if ( (expression (primaryExpression (identifier tradeEventEnabled))) ) (statement (block { (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier TradeSuccess))) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier userId2Address))) [ (expression (expression (primaryExpression (identifier data))) & (expression (primaryExpression (identifier USER_MASK)))) ]) , (expression (primaryExpression (identifier baseGet))) , (expression (primaryExpression (identifier tokenGet))) , (expression (primaryExpression (identifier isBuy))) , (expression (primaryExpression (identifier fee))))) )) ;))) })))) }))) (contractPart (functionDefinition function (identifier updateUserBalance) (parameterList ( (parameter (typeName (elementaryTypeName uint256)) (identifier data)) , (parameter (typeName (elementaryTypeName bool)) (identifier isBuy)) , (parameter (typeName (elementaryTypeName uint256)) (identifier baseGet)) , (parameter (typeName (elementaryTypeName uint256)) (identifier tokenGet)) , (parameter (typeName (elementaryTypeName uint256)) (identifier fee)) , (parameter (typeName (elementaryTypeName address)) (identifier token)) , (parameter (typeName (elementaryTypeName address)) (identifier base)) )) (modifierList internal) (block { (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName address)) (identifier user)) = (expression (expression (primaryExpression (identifier userId2Address))) [ (expression (expression (primaryExpression (identifier data))) & (expression (primaryExpression (identifier USER_MASK)))) ]) ;))) (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint256)) (identifier baseFee)) = (expression (primaryExpression (identifier fee))) ;))) (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint256)) (identifier joyFee)) = (expression (primaryExpression (numberLiteral 0))) ;))) (statement (ifStatement if ( (expression (expression ( (expression (expression (expression (primaryExpression (identifier base))) == (expression (primaryExpression (numberLiteral 0)))) ? (expression (expression ( (expression (expression (primaryExpression (identifier data))) & (expression (primaryExpression (identifier JOY_PRICE_MASK)))) )) >> (expression (primaryExpression (numberLiteral 164)))) : (expression (expression ( (expression (expression (primaryExpression (identifier data))) & (expression (primaryExpression (identifier TOKEN_JOY_PRICE_MASK)))) )) >> (expression (primaryExpression (numberLiteral 64))))) )) != (expression (primaryExpression (numberLiteral 0)))) ) (statement (block { (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier joyFee))) = (expression (primaryExpression (identifier fee)))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier baseFee))) = (expression (primaryExpression (numberLiteral 0)))) ;))) })))) (statement (ifStatement if ( (expression (primaryExpression (identifier isBuy))) ) (statement (block { (statement (simpleStatement (expressionStatement (expression (expression (expression (expression (primaryExpression (identifier balances))) [ (expression (primaryExpression (identifier base))) ]) [ (expression (primaryExpression (identifier user))) ]) = (expression (expression (expression (expression (expression (expression (expression (primaryExpression (identifier balances))) [ (expression (primaryExpression (identifier base))) ]) [ (expression (primaryExpression (identifier user))) ]) . (identifier sub)) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier baseGet))))) )) . (identifier sub)) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier baseFee))))) ))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (expression (expression (primaryExpression (identifier balances))) [ (expression (primaryExpression (identifier token))) ]) [ (expression (primaryExpression (identifier user))) ]) = (expression (expression (expression (expression (expression (primaryExpression (identifier balances))) [ (expression (primaryExpression (identifier token))) ]) [ (expression (primaryExpression (identifier user))) ]) . (identifier add)) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier tokenGet))))) ))) ;))) })) else (statement (block { (statement (simpleStatement (expressionStatement (expression (expression (expression (expression (primaryExpression (identifier balances))) [ (expression (primaryExpression (identifier base))) ]) [ (expression (primaryExpression (identifier user))) ]) = (expression (expression (expression (expression (expression (expression (expression (primaryExpression (identifier balances))) [ (expression (primaryExpression (identifier base))) ]) [ (expression (primaryExpression (identifier user))) ]) . (identifier add)) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier baseGet))))) )) . (identifier sub)) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier baseFee))))) ))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (expression (expression (primaryExpression (identifier balances))) [ (expression (primaryExpression (identifier token))) ]) [ (expression (primaryExpression (identifier user))) ]) = (expression (expression (expression (expression (expression (primaryExpression (identifier balances))) [ (expression (primaryExpression (identifier token))) ]) [ (expression (primaryExpression (identifier user))) ]) . (identifier sub)) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier tokenGet))))) ))) ;))) })))) (statement (ifStatement if ( (expression (expression (primaryExpression (identifier joyFee))) != (expression (primaryExpression (numberLiteral 0)))) ) (statement (block { (statement (simpleStatement (expressionStatement (expression (expression (expression (expression (primaryExpression (identifier balances))) [ (expression (primaryExpression (identifier joyToken))) ]) [ (expression (primaryExpression (identifier user))) ]) = (expression (expression (expression (expression (expression (primaryExpression (identifier balances))) [ (expression (primaryExpression (identifier joyToken))) ]) [ (expression (primaryExpression (identifier user))) ]) . (identifier sub)) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier joyFee))))) ))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (expression (expression (primaryExpression (identifier balances))) [ (expression (primaryExpression (identifier joyToken))) ]) [ (expression (primaryExpression (identifier joysoWallet))) ]) = (expression (expression (expression (expression (expression (primaryExpression (identifier balances))) [ (expression (primaryExpression (identifier joyToken))) ]) [ (expression (primaryExpression (identifier joysoWallet))) ]) . (identifier add)) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier joyFee))))) ))) ;))) })) else (statement (block { (statement (simpleStatement (expressionStatement (expression (expression (expression (expression (primaryExpression (identifier balances))) [ (expression (primaryExpression (identifier base))) ]) [ (expression (primaryExpression (identifier joysoWallet))) ]) = (expression (expression (expression (expression (expression (primaryExpression (identifier balances))) [ (expression (primaryExpression (identifier base))) ]) [ (expression (primaryExpression (identifier joysoWallet))) ]) . (identifier add)) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier baseFee))))) ))) ;))) })))) }))) (contractPart (functionDefinition function (identifier calculateFee) (parameterList ( (parameter (typeName (elementaryTypeName uint256)) (identifier gasFee)) , (parameter (typeName (elementaryTypeName uint256)) (identifier data)) , (parameter (typeName (elementaryTypeName uint256)) (identifier baseGet)) , (parameter (typeName (elementaryTypeName bytes32)) (identifier orderHash)) , (parameter (typeName (elementaryTypeName bool)) (identifier isTaker)) , (parameter (typeName (elementaryTypeName bool)) (identifier isEthOrder)) )) (modifierList internal (stateMutability view)) (returnParameters returns (parameterList ( (parameter (typeName (elementaryTypeName uint256))) ))) (block { (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint256)) (identifier fee)) = (expression (expression (expression (expression (primaryExpression (identifier orderFills))) [ (expression (primaryExpression (identifier orderHash))) ]) == (expression (primaryExpression (numberLiteral 0)))) ? (expression (primaryExpression (identifier gasFee))) : (expression (primaryExpression (numberLiteral 0)))) ;))) (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint256)) (identifier txFee)) = (expression (expression (expression (primaryExpression (identifier baseGet))) . (identifier mul)) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier isTaker))) ? (expression (expression ( (expression (expression (primaryExpression (identifier data))) & (expression (primaryExpression (identifier TAKER_FEE_MASK)))) )) >> (expression (primaryExpression (numberLiteral 208)))) : (expression (expression ( (expression (expression (primaryExpression (identifier data))) & (expression (primaryExpression (identifier MAKER_FEE_MASK)))) )) >> (expression (primaryExpression (numberLiteral 192))))))) )) <missing ';'>))) (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint256)) (identifier joyPrice)) = (expression (expression (primaryExpression (identifier isEthOrder))) ? (expression (expression ( (expression (expression (primaryExpression (identifier data))) & (expression (primaryExpression (identifier JOY_PRICE_MASK)))) )) >> (expression (primaryExpression (numberLiteral 164)))) : (expression (expression ( (expression (expression (primaryExpression (identifier data))) & (expression (primaryExpression (identifier TOKEN_JOY_PRICE_MASK)))) )) >> (expression (primaryExpression (numberLiteral 64))))) ;))) (statement (ifStatement if ( (expression (expression (primaryExpression (identifier joyPrice))) != (expression (primaryExpression (numberLiteral 0)))) ) (statement (block { (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier txFee))) = (expression (expression (primaryExpression (identifier isEthOrder))) ? (expression (primaryExpression (identifier txFee))))) <missing ';'>))) })))) (statement (returnStatement return (expression (expression (expression (primaryExpression (identifier fee))) . (identifier add)) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier txFee))))) )) ;)) }))) (contractPart (functionDefinition function (identifier calculateBaseGet) (parameterList ( (parameter (typeName (elementaryTypeName uint256)) (identifier amountSell)) , (parameter (typeName (elementaryTypeName uint256)) (identifier amountBuy)) , (parameter (typeName (elementaryTypeName bool)) (identifier isBuy)) , (parameter (typeName (elementaryTypeName uint256)) (identifier tokenGet)) )) (modifierList internal (stateMutability pure)) (returnParameters returns (parameterList ( (parameter (typeName (elementaryTypeName uint256))) ))) (block { (statement (returnStatement return (expression (expression (primaryExpression (identifier isBuy))) ? (expression (expression (expression (primaryExpression (identifier tokenGet))) . (identifier mul)) ( (functionCallArguments (expressionList (expression (primaryExpression (identifier amountSell))))) ))) <missing ';'>)) }))) (contractPart (functionDefinition function (identifier calculateTokenGet) (parameterList ( (parameter (typeName (elementaryTypeName uint256)) (identifier amountSell)) , (parameter (typeName (elementaryTypeName uint256)) (identifier amountBuy)) , (parameter (typeName (elementaryTypeName uint256)) (identifier remainingToken)) , (parameter (typeName (elementaryTypeName bool)) (identifier isBuy)) , (parameter (typeName (elementaryTypeName bytes32)) (identifier orderHash)) )) (modifierList internal (stateMutability view)) (returnParameters returns (parameterList ( (parameter (typeName (elementaryTypeName uint256))) ))) (block { (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint256)) (identifier makerRemainingToken)) = (expression (expression (primaryExpression (identifier isBuy))) ? (expression (primaryExpression (identifier amountBuy))) : (expression (primaryExpression (identifier amountSell)))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier makerRemainingToken))) = (expression (expression (expression (primaryExpression (identifier makerRemainingToken))) . (identifier sub)) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier orderFills))) [ (expression (primaryExpression (identifier orderHash))) ]))) ))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (primaryExpression (identifier require))) ( (functionCallArguments (expressionList (expression (expression (primaryExpression (identifier makerRemainingToken))) > (expression (primaryExpression (numberLiteral 0)))))) )) ;))) (statement (returnStatement return (expression (expression (expression (primaryExpression (identifier makerRemainingToken))) >= (expression (primaryExpression (identifier remainingToken)))) ? (expression (primaryExpression (identifier remainingToken))) : (expression (primaryExpression (identifier makerRemainingToken)))) ;)) }))) }) <EOF>)